name: infrastructure

on:
  push:
    branches:
      - main
      - stg
      - dev
    tags: ['v*.*.*']
  pull_request:
    branches:
      - main
      - stg
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Lint Code Base
        uses: super-linter/super-linter/slim@v5
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_GITHUB_ACTIONS: true
          VALIDATE_KUBERNETES_KUBECONFORM: true
          VALIDATE_MARKDOWN: true
          VALIDATE_TERRAFORM_FMT: true
          VALIDATE_TERRAFORM_TERRASCAN: true
          VALIDATE_TERRAFORM_TFLINT: true
          VALIDATE_YAML: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gke-cluster:
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      actions: read
      contents: read
    defaults:
      run:
        working-directory: compositions/gke-cluster

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

  example-app-sa:
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      actions: read
      contents: read
    defaults:
      run:
        working-directory: compositions/example-app-sa

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

  cert-manager-sa:
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      actions: read
      contents: read
    defaults:
      run:
        working-directory: compositions/cert-manager-sa

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_ACCESS_TOKEN }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          version: '437.0.1'

      - name: Role binding
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: gcloud iam service-accounts add-iam-policy-binding --role roles/iam.workloadIdentityUser --member "serviceAccount:celonis-labs.svc.id.goog[cert-manager/cert-manager]" dns01-solver@celonis-labs.iam.gserviceaccount.com

  cert-manager:
    runs-on: ubuntu-latest
    needs: [gke-cluster, cert-manager-sa]
    permissions:
      actions: read
      contents: read
    defaults:
      run:
        working-directory: amenities/cert-manager

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

  ingress-nginx:
    runs-on: ubuntu-latest
    needs: [gke-cluster]
    permissions:
      actions: read
      contents: read
    defaults:
      run:
        working-directory: amenities/ingress-nginx

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.2

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Plan
        run: terraform plan -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_ACCESS_TOKEN }}

  manifests:
    runs-on: ubuntu-latest
    needs: [gke-cluster, cert-manager]
    permissions:
      contents: read
      id-token: write
    defaults:
      run:
        working-directory: amenities/manifests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_ACCESS_TOKEN }}'

      - name: Get cluster credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: gke-on-vpc-cluster
          location: europe-west6

      # The KUBECONFIG env var is automatically exported and picked up by kubectl.
      - name: Apply manifests
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: 'kubectl apply -f *.yaml'
